<?xml version="1.0" encoding="UTF-8" ?>
<Module>
    <!-- Licensed under the Apache License, Version 2.0 (the "License"); you 
  		may not * use this file except in compliance with the License. You may obtain 
  		a copy of * the License at * * http://www.apache.org/licenses/LICENSE-2.0 
  		* * Unless required by applicable law or agreed to in writing, software * 
  		distributed under the License is distributed on an "AS IS" BASIS, WITHOUT 
  		* WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the 
  		* License for the specific language governing permissions and limitations 
  		under * the License -->
    <ModulePrefs title="Hangout Starter">
        <Require feature="rpc" />
        <Require feature="views" />
        <!-- Require feature="locked-domain" / -->
    </ModulePrefs>
    <Content type="html"><![CDATA[     

<html>

<style>
  body { padding: 5px; margin: 0;}
  h1 { font-size: 12pt; margin: 0; padding: 0; margin-bottom: 5px;}

  #map { width: 280px; height: 200px; margin-left: auto; margin-right: auto;}
  
</style>

<body style="padding: 10px">

	<script src="https://talkgadget.google.com/hangouts/_/api/hangout.js?v=1.1" ></script>
        <!--script src="https://hangoutsapi.talkgadget.google.com/hangouts/api/hangout.js?v=1.1" ></script-->
	<script src="//apis.google.com/js/client.js"></script>
	<script type="text/javascript" src="https://maps.google.com/maps/api/js?sensor=false"></script>

	
	
    <h1>Hangout Location Demo</h1>	
    <div id="map"></div>
    <div id="location">	
      <p id="current_location" class="small"></p>
      <button id="share" disabled="disabled">Share location</button>
      <button id="unshare" disabled="disabled">Remove location</button>
    </div>
    <div id="participants">
    	<ul id="active_participants"/>
    </div>	

    <script>
    
    function GoogleMapLocation(){
    	this.map = null; 
	this.latlng = {}; 
	this.locations = {};
	this.api_key = "AIzaSyBXW3ct9U5L1guh9LdCpYVK4ZCeaV_vw3w";
		
		
		
	//Enlazando eventos
	//gapi.hangout.data.onStateChanged.add(this.onStateChanged.bind(this));
        //gapi.hangout.onParticipantsAdded.add(this.onParticipantsAdded.bind(this));
        //gapi.hangout.onParticipantsChanged.add(this.onParticipantsAdded.bind(this));
        //gapi.hangout.onParticipantsRemoved.add(this.removeParticipants.bind(this));
		
	this.createMap(this);
	this.prepareScopeAndAutorization(this);
	this.showLocations(this);
		
	this.showParticipants.bind(this);
    	
    }
    
    /*GoogleMapLocation.prototype.showParticipants = function(){
    	ul = document.getElementById("active_participants");
    	
    	participants = gapi.hangout.getParticipants();
    	for (i=0; i<participants.length; i++){
    		li = document.createElement("li");
    		li.innerHTML = participants[i].person.displayName;
    		ul.appendChild(li);
    	}
    }*/
    
    GoogleMapLocation.prototype.onParticipantsAdded = function(event){
    	console.log(event);
    	console.log(event.participants);
    	
		var participants = event.participants;
		
		console.log(participants.length);
		
		ul = document.getElementById("active_participants");
		for (i=0; i<participants.length; i++){
		
			li = document.createElement("li");
			console.log(i);
			console.log(participants[i]);
			console.log(participants[i].person);
			console.log(participants[i].person.displayName);
    		li.innerHTML = participants[i].person.displayName;
    		ul.appendChild(li);
  		}
    }
    
    GoogleMapLocation.prototype.showLocations = function(){
    	var state, id, latlng;
    	state = gapi.hangout.data.getState();
    	for (id in state) {
      		if (state.hasOwnProperty(id)) {
        		latlng = JSON.parse(state[id]);
        		this.addLocation(id, latlng.lat, latlng.lng);
      		}
    	}
    }
    
    GoogleMapLocation.prototype.addLocation = function(){
    	var latlng, info, image_url, image, participant;
    	if (id !== gapi.hangout.getParticipantId()) {
      		if (!this.locations[id]) {
        		latlng = new google.maps.LatLng(lat, lng);
        		participant = gapi.hangout.getParticipantById(id);
        		if (participant && participant.person) {
          			info = participant.person.displayName;
          			image_url = participant.person.image.url;
          			image = new google.maps.MarkerImage(
            			image_url,
            			new google.maps.Size(32, 32),
            			new google.maps.Point(0, 0),
            			new google.maps.Point(16, 16),
            			new google.maps.Size(32, 32)
          			);
          			this.locations[id] = new google.maps.Marker({
            			position: latlng,
            			map: this.map,
            			title: info,
            			icon: image
          				});
          			this.zoom();
        		}
      		}
    	}
    
    }
    
    GoogleMapLocation.prototype.handleAuthResult = function(result){
    	console.log(result);
    	
    	if (result) {
      		gapi.client.load('latitude', 'v1', this.loadLocation.bind(this));
   		} else {
      		document.getElementById("current_location").innerHTML = "No me autorizaste!!!!";
    	}
    }
    
    GoogleMapLocation.prototype.loadLocation = function(){
    	//request = gapi.client.latitude.currentLocation.get();
    	//request.execute(function(resp) { console.log(resp); });
    	if (navigator.geolocation){
			navigator.geolocation.getCurrentPosition( 
				this.generateMark.bind(this));
		}  
    }
    
    GoogleMapLocation.prototype.generateMark = function(position){
    	console.log(position);
    
    	var button, wp;
      	if (position == null) {
        	document.getElementById("current_location").innerHTML = "Can't determine location:";
      	} else {
        	document.getElementById("current_location").innerHTML = "Current location: " + position.coords.latitude + " " + position.coords.longitude;
        	this.latlng.lat = position.coords.latitude;
        	this.latlng.lng = position.coords.longitude;

        	button = document.getElementById("share");
        	button.removeAttribute("disabled");
        	button.onclick = this.shareLocation.bind(this);

        	button = document.getElementById("unshare");
        	button.onclick = this.unshareLocation.bind(this);

        	wp = new google.maps.LatLng(this.latlng.lat, this.latlng.lng);
        	this.locations[gapi.hangout.getParticipantId()] = new google.maps.Marker({position: wp, map: this.map});
        	this.zoom();
    	}
    }
    
    GoogleMapLocation.prototype.unshareLocation = function(){
    	var button;
    	button = document.getElementById("unshare");
    	button.setAttribute("disabled", "disabled");
    	button = document.getElementById("share");
    	button.removeAttribute("disabled");
    	gapi.hangout.data.clearValue(gapi.hangout.getParticipantId());
    }
    
    GoogleMapLocation.prototype.shareLocation = function(){
		var button, shareObj;
    	button = document.getElementById("share");
    	button.setAttribute("disabled", "disabled");
    	button = document.getElementById("unshare");
    	button.removeAttribute("disabled");
    	shareObj = {lat: this.latlng.lat, lng: this.latlng.lng};
    	gapi.hangout.data.setValue(gapi.hangout.getParticipantId(), JSON.stringify(shareObj));    	
    }
    
    GoogleMapLocation.prototype.zoom = function () {
    	var bounds, id;
    	bounds = new google.maps.LatLngBounds();
    	for (id in this.locations) {
      		if (this.locations.hasOwnProperty(id)) {
        		bounds.extend(this.locations[id].getPosition());
      		}
   		}
    	if (!bounds.isEmpty()) {
      		this.map.fitBounds(bounds);
      		if (this.map.getZoom() > 8) {
        		this.map.setZoom(8);
      		}
    	}
  	};
    

    GoogleMapLocation.prototype.prepareScopeAndAutorization = function () {
    	var scopes = [
      		'https://www.googleapis.com/auth/plus.me',
      		'https://www.googleapis.com/auth/hangout.av',
      		'https://www.googleapis.com/auth/hangout.participants',
      		'https://www.googleapis.com/auth/latitude.current.city'
    		];
    	
    	/**
    	 * Toma por defecto el API KEY registrado en el Hangout
    	 */ 	
        gapi.client.setApiKey(null);
    	
    	/**
    	 * client_id es nulo porque toma por defecto el client id asociado al
    	 * proyecto de Hangout.
    	 */
    	gapi.auth.authorize({
      		client_id: null,
      		scope: scopes,
      		immediate: true
    	}, this.handleAuthResult.bind(this));
    }
    

    GoogleMapLocation.prototype.createMap = function () {
    	var latlng, myOptions;
    	latlng = new google.maps.LatLng(0, 0);
    	myOptions = {
      		zoom: 0,
      		center: latlng,
      		disableDefaultUI: true,
      		zoomControl: true,
      		mapTypeId: google.maps.MapTypeId.ROADMAP
    	};
    	this.map = new google.maps.Map(document.getElementById("map"), myOptions);
    }
    
    //google.load("maps","3.8", {"other_params":"client=AIzaSyBXW3ct9U5L1guh9LdCpYVK4ZCeaV_vw3w&sensor=false", callback: console.log("LOAD!!!!")});
    function init(){
    	gapi.hangout.onApiReady.add(function(eventObj) {
            if (eventObj.isApiReady == true) {
                console.log("gapi.hangout READY");
                new GoogleMapLocation();
            }
	});
    }
    
    // Wait for gadget to load.                                                       
    gadgets.util.registerOnLoadHandler(init);
</script>

</body>
]]>
    </Content>
</Module>
